@page "/"
@inject NavigationManager NavigationManager

<style>
    canvas {
        cursor: crosshair;
        border: 1px solid #000000;
    }
</style>
    <div >
        <Canvas @onmousemove="MouseMoveCanvas" @onmouseover="MouseOverCanvas" @onmouseup="MouseUpCanvas" @onmousedown="MouseownCanvas" width="300" Height="400"  @ref="_context"></Canvas>
    </div>
        <select id="color" @bind="@clr">
        <option value="black">Black</option>
        <option value="red">Red</option>
        <option value="yellow">Yellow</option>
        <option value="green">Green</option>
        <option value="blue">Blue</option>
    </select>
    <div id="output"></div>
    @code
    {
        private Canvas _context;
        private HubConnection hubConnection;
        private double canvasx;
        private double canvasy;
        private double last_mousex;
        private double last_mousey;
        private double mousex;
        private double mousey;
        private bool mousedown = false;
        private string tooltype = "draw";
        private string clr = "";

        protected override async Task OnInitializedAsync()
        {
            this.clr = "black";

            hubConnection = new HubConnectionBuilder()
                                .WithUrl(NavigationManager.ToAbsoluteUri("/draw"))
                                .Build();

            hubConnection.On("draw", (int prevX, int prevY, int currentX, int currentY, string color) =>
            {
                drawCanvas(prevX, prevX, currentX, currentY, color).Wait();
            });

            await hubConnection.StartAsync();
            StateHasChanged();
        }

        protected override async Task OnAfterRenderAsync(bool firstRender)
        {
            if (firstRender)
            {
                await using (var ctx1 = await _context.GetContext2DAsync())
                {
                    this.canvasx = await ctx1.ShadowOffsetXAsync();
                    this.canvasy = await ctx1.ShadowOffsetYAsync();
                    StateHasChanged();
                }
            }
        }

        async Task MouseownCanvas(MouseEventArgs e)
        {
            this.last_mousex = mousex = e.ClientX - canvasx;
            this.last_mousey = mousey = e.ClientY - canvasy;
            this.mousedown = true;
            StateHasChanged();
        }

        async Task MouseUpCanvas(MouseEventArgs e)
        {
            mousedown = false;
            StateHasChanged();
        }

        async Task MouseOverCanvas(MouseEventArgs e)
        {
            this.last_mousex = 0;
            this.last_mousey = 0;
        }

        async Task MouseMoveCanvas(MouseEventArgs e)
        {
            mousex = e.ClientX - canvasx;
            mousey = e.ClientY - canvasy;

            if ((last_mousex > 0 && last_mousey > 0) && mousedown)
            {
                await drawCanvas(mousex, mousey, last_mousex, last_mousey, clr);
                await hubConnection.InvokeAsync("draw", last_mousex, last_mousey, mousex, mousey, clr);
            }
            last_mousex = mousex;
            last_mousey = mousey;
        }


        async Task drawCanvas(double prev_x, double prev_y, double x, double y, string clr)
        {
            await using (var ctx1 = await _context.GetContext2DAsync())
            {
                await ctx1.BeginPathAsync();
                await ctx1.GlobalCompositeOperationAsync(CompositeOperation.Source_Over);
                await ctx1.StrokeStyleAsync(clr);
                await ctx1.LineWidthAsync(3);
                await ctx1.MoveToAsync(x, y);
                await ctx1.LineToAsync(x, y);
                await ctx1.LineJoinAsync(LineJoin.Round);
                await ctx1.LineCapAsync(LineCap.Round);
                await ctx1.StrokeAsync();
                StateHasChanged();
            }

        }
    }
